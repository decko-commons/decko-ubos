developer=http://grasscommons.org/
url=http://wagn.org/
maintainer=${developer}
pkgname=decko
pkgver=0.3.4
pkgrel=1
pkgdesc="A wiki approach to stuctured data, dynamic interaction, and web design"
arch=('any')
license=("GPL")
source=("https://github.com/decko-commons/decko/archive/v${pkgver}.zip")
depends=(
    'nodejs'
    'ubos-rails-support'
    'mod_passenger'
    'smtp-server' )
options=('!strip')
sha512sums=('45e4f8682a5e88ef45d658844c1c051468b89204a9e297d967fbde41cee2befb9cd57f69dd3c282820509050af5e5fff7a7fc83205d89ed93e60feaf8c08b596')

build() {
    cd ${startdir}
    RAILS_ENV=production bin/bundle install --deployment --without development test
    RAILS_ENV=production bin/bundle exec decko update
}

package() {
# Manifest
    mkdir -p ${pkgdir}/var/lib/ubos/manifests
    install -m0644 ${startdir}/ubos-manifest.json ${pkgdir}/var/lib/ubos/manifests/${pkgname}.json

# Icons
    mkdir -p ${pkgdir}/srv/http/_appicons/${pkgname}
    install -m644 ${startdir}/appicons/{72x72,144x144}.png ${pkgdir}/srv/http/_appicons/${pkgname}/

# Data directory
    mkdir -p ${pkgdir}/var/lib/${pkgname}

# Templates
#    mkdir -p ${pkgdir}/usr/share/${pkgname}/tmpl
#    cp ${startdir}/tmpl/* ${pkgdir}/usr/share/${pkgname}/tmpl/

# Initial SQL
#    mkdir -p ${pkgdir}/usr/share/${pkgname}/sql
#    cp ${startdir}/sql/bootstrap.sql ${pkgdir}/usr/share/${pkgname}/sql/

# Code
# Code -- be selective in what we package
    mkdir -p ${pkgdir}/usr/share/${pkgname}/
    toCopy=(
        '.bundle'
        'app'
        'bin'
        'config/environments/production.rb'
        'config/initializers'
        'config/locales'
        'config/application.rb'
        'config/boot.rb'
        'config/cable.yml'
        'config/environment.rb'
        'config/routes.rb'
        'config/secrets.yml'
        'config/secrets.yml.key'
        'config/spring.rb'
        'db/migrate'
        'db/schema.rb'
        'db/seeds.rb'
        'lib'
        'public/assets'
        'tmpl'
        'vendor'
        'config.ru'
        'Gemfile'
        'Gemfile.lock'
        'Rakefile'
    )
    for t in ${toCopy[@]}; do
        from="${startdir}/${t}"
        if [[ -e ${from} ]]; then
            to="${pkgdir}/usr/share/${pkgname}/${t}"
            todir=$(dirname $to)
            [[ -d ${todir} ]] || mkdir -p -m 755 ${todir}
            cp -a ${from} ${todir}/
        fi
     done

#    mkdir -p ${pkgdir}/usr/share/${pkgname}/web
#    cp -r -p ${startdir}/web/* ${pkgdir}/usr/share/${pkgname}/web/
#    mkdir -p ${pkgdir}/usr/share/${pkgname}/bin
#    install -m755 ${startdir}/bin/* ${pkgdir}/usr/share/${pkgname}/bin/

# Logging
    mkdir -p -m755 ${pkgdir}/var/log/${pkgname}

# Gems
#    rsync -a --exclude 'cache/' ${srcdir}/.bundle ${pkgdir}/usr/share/${pkgname}/
}

